/**
 * SalesLogix API
 * Allows to access SalesLogix information and reports Allows to access SalesLogix information and reports
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class PoliciesApi {
    protected basePath = 'http://northstar.nybblenetwork.com/slx-api/v1';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Add Policy Premium
     * Add a new premium record
     * @param id 
     * @param premiumId 
     * @param body 
     */
    public addPolicyPremium (id: string, premiumId: string, body?: models.PolicyPremium, extraHttpRequestParams?: any ) : Observable<models.PolicyPremium> {
        const path = this.basePath + '/policies/{id}/premium/{premium_id}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'premium_id' + '}', String(premiumId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addPolicyPremium.');
        }
        // verify required parameter 'premiumId' is not null or undefined
        if (premiumId === null || premiumId === undefined) {
            throw new Error('Required parameter premiumId was null or undefined when calling addPolicyPremium.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add Policy Stream
     * 
     * @param id 
     * @param body 
     */
    public addPolicyStream (id: string, body?: models.PolicyStream, extraHttpRequestParams?: any ) : Observable<models.PolicyStream> {
        const path = this.basePath + '/policies/{id}/stream'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addPolicyStream.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List Policy Products
     * 
     * @param id 
     */
    public gETPoliciesIdProducts (id: string, extraHttpRequestParams?: any ) : Observable<Array<models.Policyproduct>> {
        const path = this.basePath + '/policies/{id}/products'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gETPoliciesIdProducts.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get Policy
     * This API retrieves a single policy
     * @param id 
     */
    public getPolicy (id: string, extraHttpRequestParams?: any ) : Observable<models.Policy> {
        const path = this.basePath + '/policies/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPolicy.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get Policy Premium
     * Retrieve a premium record
     * @param id 
     * @param premiumId 
     */
    public getPolicyPremium (id: string, premiumId: string, extraHttpRequestParams?: any ) : Observable<models.PolicyPremium> {
        const path = this.basePath + '/policies/{id}/premium/{premium_id}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'premium_id' + '}', String(premiumId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPolicyPremium.');
        }
        // verify required parameter 'premiumId' is not null or undefined
        if (premiumId === null || premiumId === undefined) {
            throw new Error('Required parameter premiumId was null or undefined when calling getPolicyPremium.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get Policy Stream
     * 
     * @param id 
     * @param year 
     * @param month 
     */
    public getPolicyStream (id: string, year?: number, month?: number, extraHttpRequestParams?: any ) : Observable<models.PolicyStream> {
        const path = this.basePath + '/policies/{id}/stream'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPolicyStream.');
        }
        if (year !== undefined) {
            queryParameters.set('year', String(year));
        }

        if (month !== undefined) {
            queryParameters.set('month', String(month));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List Policies
     * 
     * @param premiumRequestBatchState 
     * @param premiumRequestPolicyState 
     */
    public listPolicies (premiumRequestBatchState?: string, premiumRequestPolicyState?: string, extraHttpRequestParams?: any ) : Observable<Array<models.Policy>> {
        const path = this.basePath + '/policies';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (premiumRequestBatchState !== undefined) {
            queryParameters.set('premiumRequestBatchState', String(premiumRequestBatchState));
        }

        if (premiumRequestPolicyState !== undefined) {
            queryParameters.set('premiumRequestPolicyState', String(premiumRequestPolicyState));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List Policy Premiums
     * Retrieve the policy&#39;s premium record/s
     * @param id 
     * @param last 
     */
    public listPolicyPremiums (id: number, last?: boolean, extraHttpRequestParams?: any ) : Observable<Array<models.PolicyPremium>> {
        const path = this.basePath + '/policies/{id}/premiums'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPolicyPremiums.');
        }
        if (last !== undefined) {
            queryParameters.set('last', String(last));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update Policy Premium
     * Update premium record
     * @param id 
     * @param premiumId 
     * @param body 
     */
    public updatePolicyPremium (id: string, premiumId: string, body?: models.PolicyPremium, extraHttpRequestParams?: any ) : Observable<models.PolicyPremium> {
        const path = this.basePath + '/policies/{id}/premium/{premium_id}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'premium_id' + '}', String(premiumId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePolicyPremium.');
        }
        // verify required parameter 'premiumId' is not null or undefined
        if (premiumId === null || premiumId === undefined) {
            throw new Error('Required parameter premiumId was null or undefined when calling updatePolicyPremium.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update Policy Stream
     * 
     * @param id 
     * @param body 
     */
    public updatePolicyStream (id: string, body?: models.PolicyStream, extraHttpRequestParams?: any ) : Observable<models.PolicyStream> {
        const path = this.basePath + '/policies/{id}/stream'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePolicyStream.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
