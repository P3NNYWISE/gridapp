/**
 * SalesLogix API
 * Allows to access SalesLogix information and reports Allows to access SalesLogix information and reports
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var http_1 = require('@angular/http');
var core_1 = require('@angular/core');
require('rxjs/Rx');
/* tslint:disable:no-unused-variable member-ordering */
'use strict';
var PremiumRequestsApi = (function () {
    function PremiumRequestsApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://northstar.nybblenetwork.com/slx-api/v1';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     * Add Premium Request
     * Create a new premium request with the corresponding documents and batches
     * @param body
     */
    PremiumRequestsApi.prototype.addPremiumRequest = function (body, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        var requestOptions = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * CalculatePaymentDates
     * This API retrieve the payment dates of premium requests.
     * @param currentDate current_date to return
     * @param count number of counts
     * @param workableDays number of workable_days
     */
    PremiumRequestsApi.prototype.calculatePaymentDates = function (currentDate, count, workableDays, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/payment-dates';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (currentDate !== undefined) {
            queryParameters.set('current_date', String(currentDate));
        }
        if (count !== undefined) {
            queryParameters.set('count', String(count));
        }
        if (workableDays !== undefined) {
            queryParameters.set('workable_days', String(workableDays));
        }
        var requestOptions = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * List premium request batches by premium request Id
     *
     * @param premiumRequestId
     * @param state
     */
    PremiumRequestsApi.prototype.gETPremiumRequestBatches = function (premiumRequestId, state, extraHttpRequestParams) {
        var path = this.basePath + '/premium-request-batches';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (premiumRequestId !== undefined) {
            queryParameters.set('premiumRequestId', String(premiumRequestId));
        }
        if (state !== undefined) {
            queryParameters.set('state', String(state));
        }
        var requestOptions = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * List premium request policies by premium request id
     *
     * @param id
     */
    PremiumRequestsApi.prototype.gETPremiumRequestsIdPolicies = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/{id}/policies'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gETPremiumRequestsIdPolicies.');
        }
        var requestOptions = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get Premium Request
     * This API retrieves a premium request.
     * @param id
     * @param includePolicyDetail
     */
    PremiumRequestsApi.prototype.getPremiumRequest = function (id, includePolicyDetail, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPremiumRequest.');
        }
        if (includePolicyDetail !== undefined) {
            queryParameters.set('includePolicyDetail', String(includePolicyDetail));
        }
        var requestOptions = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * List Premium Request Policies
     *
     * @param status
     * @param hasPayment Retrieves the policies that have a payment date or not already applied in thee current policy premium.
     */
    PremiumRequestsApi.prototype.listPremiumRequestPolicies = function (status, hasPayment, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/policies';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (status !== undefined) {
            queryParameters.set('status', String(status));
        }
        if (hasPayment !== undefined) {
            queryParameters.set('hasPayment', String(hasPayment));
        }
        var requestOptions = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update premium request policy by policy ID
     *
     * @param policyId
     * @param body
     */
    PremiumRequestsApi.prototype.pUTPremiumRequestsPoliciesPolicyId = function (policyId, body, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/policies/{policyId}'
            .replace('{' + 'policyId' + '}', String(policyId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'policyId' is not null or undefined
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling pUTPremiumRequestsPoliciesPolicyId.');
        }
        var requestOptions = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update Premium Request
     * This API updates a premium request.
     * @param id
     * @param body
     */
    PremiumRequestsApi.prototype.updatePremiumRequest = function (id, body, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePremiumRequest.');
        }
        var requestOptions = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update Premium Request Batch
     * Update the policy batch
     * @param id
     * @param batchId
     * @param body
     */
    PremiumRequestsApi.prototype.updatePremiumRequestBatch = function (id, batchId, body, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/{id}/batchs/{batchId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'batchId' + '}', String(batchId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePremiumRequestBatch.');
        }
        // verify required parameter 'batchId' is not null or undefined
        if (batchId === null || batchId === undefined) {
            throw new Error('Required parameter batchId was null or undefined when calling updatePremiumRequestBatch.');
        }
        var requestOptions = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update Premium Request Policy
     * Update the policy batch
     * @param id
     * @param policyId
     * @param body
     */
    PremiumRequestsApi.prototype.updatePremiumRequestPolicy = function (id, policyId, body, extraHttpRequestParams) {
        var path = this.basePath + '/premium-requests/{id}/policies/{policyId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'policyId' + '}', String(policyId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePremiumRequestPolicy.');
        }
        // verify required parameter 'policyId' is not null or undefined
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling updatePremiumRequestPolicy.');
        }
        var requestOptions = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    PremiumRequestsApi = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), 
        __metadata('design:paramtypes', [http_1.Http, String])
    ], PremiumRequestsApi);
    return PremiumRequestsApi;
}());
exports.PremiumRequestsApi = PremiumRequestsApi;
//# sourceMappingURL=PremiumRequestsApi.js.map